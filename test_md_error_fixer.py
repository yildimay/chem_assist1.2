#!/usr/bin/env python3
"""
Test MD error fixer functionality
"""

import os
import sys
from chemassist.core.md.error_fixer import fix_md_input, analyze_md_log

def test_md_error_fixer():
    """Test MD error fixer with sample data."""
    
    # Sample problematic MDP file
    test_mdp = """
; GROMACS MD parameter file
; Generated by ChemAssist

; Run control
integrator  = md
dt          = 0.002
nsteps      = 50000

; Output control
nstxout     = 1000
nstvout     = 1000
nstfout     = 1000
nstlog      = 1000
nstenergy   = 1000

; Bond parameters
constraints = h-bonds

; Neighbor searching
cutoff-scheme = Verlet
ns_type      = grid
nstlist      = 10
rlist        = 1.0

; Electrostatics
coulombtype  = PME
rcoulomb     = 1.0

; Van der Waals
vdwtype      = Cut-off
rvdw         = 1.0

; Temperature coupling
tcoupl       = V-rescale
tc-grps      = System
tau_t        = 0.1
ref_t        = -300.0

; Pressure coupling
pcoupl       = Parrinello-Rahman
pcoupltype   = isotropic
tau_p        = 2.0
ref_p        = 1.0
compressibility = 4.5e-5

; Generate velocities
gen_vel      = yes
gen_temp     = 300.0
gen_seed     = -1
"""
    
    # Sample error log
    test_log = """
Error: Invalid temperature value in .mdp file
Reference temperature ref_t = -300.0 K is negative
Please check your .mdp file and ensure all parameters are valid
Job ended abnormally.
"""
    
    print("🧪 Testing MD Error Fixer...")
    print("=" * 50)
    
    try:
        print("🔧 Testing MDP file fixing...")
        result = fix_md_input(
            mdp_text=test_mdp,
            log_text=test_log,
            stage="md"
        )
        
        print("✅ MDP fixing successful!")
        print(f"Diagnosis: {result['diagnosis'][:100]}...")
        print(f"Fixed MDP length: {len(result['fixed_mdp'])} chars")
        
    except Exception as e:
        print(f"❌ MDP fixing failed: {e}")
    
    try:
        print("\n📊 Testing log analysis...")
        analysis_result = analyze_md_log(test_log)
        
        print("✅ Log analysis successful!")
        print(f"Analysis: {analysis_result['analysis'][:100]}...")
        print(f"Suggestions: {analysis_result['suggestions'][:100]}...")
        
    except Exception as e:
        print(f"❌ Log analysis failed: {e}")

def main():
    if len(sys.argv) > 1:
        os.environ["GROQ_API_KEY"] = sys.argv[1]
        print(f"Using API key: {sys.argv[1][:10]}...")
    else:
        print("No API key provided. Set GROQ_API_KEY environment variable.")
        print("Usage: python3 test_md_error_fixer.py YOUR_API_KEY")
        return
    
    test_md_error_fixer()

if __name__ == "__main__":
    main() 