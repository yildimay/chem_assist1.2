from __future__ import annotations

"""Molecular Dynamics input file builder (GROMACS first).

Exports:
    • MDSpec   – dataclass container for form values
    • build_mdp(spec) -> str
    • build_slurm(spec) -> str
"""

from dataclasses import dataclass, field
from textwrap import dedent
from typing import Any, Dict

# ───────────────────────────────────────────────────────────────
# Public dataclass
# ───────────────────────────────────────────────────────────────

@dataclass
class MDSpec:
    title: str = "MD Simulation"
    
    # System setup
    structure_file: str = "protein.gro"
    topology_file: str = "protein.top"
    output_prefix: str = "md"
    
    # Simulation parameters
    temperature: float = 300.0
    pressure: float = 1.0
    timestep: float = 0.002  # ps
    n_steps: int = 50000  # 100 ps total
    
    # Equilibration
    nvt_steps: int = 10000  # 20 ps
    npt_steps: int = 10000  # 20 ps
    
    # Output frequency
    nstxout: int = 1000  # coordinates
    nstvout: int = 1000  # velocities
    nstfout: int = 1000  # forces
    nstlog: int = 1000   # log
    nstenergy: int = 1000  # energy
    
    # Constraints
    constraints: str = "h-bonds"  # h-bonds, all-bonds, none
    
    # Pressure coupling
    pcoupl: str = "Parrinello-Rahman"  # Parrinello-Rahman, Berendsen, no
    tau_p: float = 2.0
    
    # Temperature coupling
    tcoupl: str = "V-rescale"  # V-rescale, Berendsen, no
    tau_t: float = 0.1
    
    # Cutoffs
    rlist: float = 1.0
    rvdw: float = 1.0
    rcoulomb: float = 1.0
    
    # SLURM settings
    slurm_nodes: int = 1
    slurm_ntasks_per_node: int = 4
    slurm_mem_per_cpu: int = 2  # GB
    slurm_time: str = "02:00:00"
    slurm_partition: str = "compute"
    
    def as_dict(self) -> Dict[str, Any]:
        return self.__dict__

# ───────────────────────────────────────────────────────────────
# GROMACS .mdp templates
# ───────────────────────────────────────────────────────────────

_MDP_TEMPLATE = dedent(
    """
    ; GROMACS MD parameter file
    ; Generated by ChemAssist
    
    ; Run control
    integrator  = md
    dt          = {timestep}
    nsteps      = {n_steps}
    
    ; Output control
    nstxout     = {nstxout}
    nstvout     = {nstvout}
    nstfout     = {nstfout}
    nstlog      = {nstlog}
    nstenergy   = {nstenergy}
    
    ; Bond parameters
    constraints = {constraints}
    
    ; Neighbor searching
    cutoff-scheme = Verlet
    ns_type      = grid
    nstlist      = 10
    rlist        = {rlist}
    
    ; Electrostatics
    coulombtype  = PME
    rcoulomb     = {rcoulomb}
    
    ; Van der Waals
    vdwtype      = Cut-off
    rvdw         = {rvdw}
    
    ; Temperature coupling
    tcoupl       = {tcoupl}
    tc-grps      = System
    tau_t        = {tau_t}
    ref_t        = {temperature}
    
    ; Pressure coupling
    pcoupl       = {pcoupl}
    pcoupltype   = isotropic
    tau_p        = {tau_p}
    ref_p        = {pressure}
    compressibility = 4.5e-5
    
    ; Free energy
    free_energy  = no
    
    ; Generate velocities
    gen_vel      = yes
    gen_temp     = {temperature}
    gen_seed     = -1
    """
).lstrip()

# ───────────────────────────────────────────────────────────────
# SLURM script template
# ───────────────────────────────────────────────────────────────

_SLURM_TEMPLATE = dedent(
    """#!/bin/bash
#SBATCH --job-name={job_name}
#SBATCH --nodes={nodes}
#SBATCH --ntasks-per-node={ntasks_per_node}
#SBATCH --mem-per-cpu={mem_per_cpu}G
#SBATCH --time={time}
#SBATCH --partition={partition}
#SBATCH --output={output_prefix}_%j.out
#SBATCH --error={output_prefix}_%j.err

# Load GROMACS module (adjust for your system)
module load gromacs

# Set up environment
export OMP_NUM_THREADS=1

echo "Starting MD simulation: {title}"
echo "Job ID: $SLURM_JOB_ID"
echo "Running on: $SLURM_NODELIST"

# Energy minimization
echo "Step 1: Energy minimization"
gmx grompp -f em.mdp -c {structure_file} -p {topology_file} -o em.tpr
gmx mdrun -v -deffnm em

# NVT equilibration
echo "Step 2: NVT equilibration"
gmx grompp -f nvt.mdp -c em.gro -r {structure_file} -p {topology_file} -o nvt.tpr
gmx mdrun -v -deffnm nvt

# NPT equilibration  
echo "Step 3: NPT equilibration"
gmx grompp -f npt.mdp -c nvt.gro -r {structure_file} -t nvt.cpt -p {topology_file} -o npt.tpr
gmx mdrun -v -deffnm npt

# Production MD
echo "Step 4: Production MD"
gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p {topology_file} -o {output_prefix}.tpr
gmx mdrun -v -deffnm {output_prefix}

echo "MD simulation completed successfully!"
"""
).lstrip()

# ───────────────────────────────────────────────────────────────
# Core render functions
# ───────────────────────────────────────────────────────────────

def build_mdp(spec: MDSpec, stage: str = "md") -> str:
    """Build GROMACS .mdp file for specified stage."""
    
    if stage == "em":
        # Energy minimization
        return dedent(
            """
            ; Energy minimization
            integrator  = steep
            nsteps      = 50000
            emtol       = 1000.0
            emstep      = 0.01
            
            ; Output control
            nstlog      = 1000
            nstenergy   = 1000
            
            ; Bond parameters
            constraints = h-bonds
            
            ; Neighbor searching
            cutoff-scheme = Verlet
            ns_type      = grid
            nstlist      = 10
            rlist        = {rlist}
            
            ; Electrostatics
            coulombtype  = PME
            rcoulomb     = {rcoulomb}
            
            ; Van der Waals
            vdwtype      = Cut-off
            rvdw         = {rvdw}
            """
        ).lstrip().format(
            rlist=spec.rlist,
            rcoulomb=spec.rcoulomb,
            rvdw=spec.rvdw
        )
    
    elif stage == "nvt":
        # NVT equilibration
        return dedent(
            """
            ; NVT equilibration
            integrator  = md
            dt          = {timestep}
            nsteps      = {nvt_steps}
            
            ; Output control
            nstlog      = {nstlog}
            nstenergy   = {nstenergy}
            
            ; Bond parameters
            constraints = {constraints}
            
            ; Neighbor searching
            cutoff-scheme = Verlet
            ns_type      = grid
            nstlist      = 10
            rlist        = {rlist}
            
            ; Electrostatics
            coulombtype  = PME
            rcoulomb     = {rcoulomb}
            
            ; Van der Waals
            vdwtype      = Cut-off
            rvdw         = {rvdw}
            
            ; Temperature coupling
            tcoupl       = {tcoupl}
            tc-grps      = System
            tau_t        = {tau_t}
            ref_t        = {temperature}
            
            ; Pressure coupling
            pcoupl       = no
            
            ; Generate velocities
            gen_vel      = yes
            gen_temp     = {temperature}
            gen_seed     = -1
            """
        ).lstrip().format(
            timestep=spec.timestep,
            nvt_steps=spec.nvt_steps,
            nstlog=spec.nstlog,
            nstenergy=spec.nstenergy,
            constraints=spec.constraints,
            rlist=spec.rlist,
            rcoulomb=spec.rcoulomb,
            rvdw=spec.rvdw,
            tcoupl=spec.tcoupl,
            tau_t=spec.tau_t,
            temperature=spec.temperature
        )
    
    elif stage == "npt":
        # NPT equilibration
        return dedent(
            """
            ; NPT equilibration
            integrator  = md
            dt          = {timestep}
            nsteps      = {npt_steps}
            
            ; Output control
            nstlog      = {nstlog}
            nstenergy   = {nstenergy}
            
            ; Bond parameters
            constraints = {constraints}
            
            ; Neighbor searching
            cutoff-scheme = Verlet
            ns_type      = grid
            nstlist      = 10
            rlist        = {rlist}
            
            ; Electrostatics
            coulombtype  = PME
            rcoulomb     = {rcoulomb}
            
            ; Van der Waals
            vdwtype      = Cut-off
            rvdw         = {rvdw}
            
            ; Temperature coupling
            tcoupl       = {tcoupl}
            tc-grps      = System
            tau_t        = {tau_t}
            ref_t        = {temperature}
            
            ; Pressure coupling
            pcoupl       = {pcoupl}
            pcoupltype   = isotropic
            tau_p        = {tau_p}
            ref_p        = {pressure}
            compressibility = 4.5e-5
            
            ; Generate velocities
            gen_vel      = no
            """
        ).lstrip().format(
            timestep=spec.timestep,
            npt_steps=spec.npt_steps,
            nstlog=spec.nstlog,
            nstenergy=spec.nstenergy,
            constraints=spec.constraints,
            rlist=spec.rlist,
            rcoulomb=spec.rcoulomb,
            rvdw=spec.rvdw,
            tcoupl=spec.tcoupl,
            tau_t=spec.tau_t,
            temperature=spec.temperature,
            pcoupl=spec.pcoupl,
            tau_p=spec.tau_p,
            pressure=spec.pressure
        )
    
    else:
        # Production MD
        return _MDP_TEMPLATE.format(
            timestep=spec.timestep,
            n_steps=spec.n_steps,
            nstxout=spec.nstxout,
            nstvout=spec.nstvout,
            nstfout=spec.nstfout,
            nstlog=spec.nstlog,
            nstenergy=spec.nstenergy,
            constraints=spec.constraints,
            rlist=spec.rlist,
            rcoulomb=spec.rcoulomb,
            rvdw=spec.rvdw,
            tcoupl=spec.tcoupl,
            tau_t=spec.tau_t,
            temperature=spec.temperature,
            pcoupl=spec.pcoupl,
            tau_p=spec.tau_p,
            pressure=spec.pressure
        )

def build_slurm(spec: MDSpec) -> str:
    """Build SLURM submission script."""
    return _SLURM_TEMPLATE.format(
        job_name=spec.title.replace(" ", "_"),
        nodes=spec.slurm_nodes,
        ntasks_per_node=spec.slurm_ntasks_per_node,
        mem_per_cpu=spec.slurm_mem_per_cpu,
        time=spec.slurm_time,
        partition=spec.slurm_partition,
        output_prefix=spec.output_prefix,
        title=spec.title,
        structure_file=spec.structure_file,
        topology_file=spec.topology_file
    )

# ───────────────────────────────────────────────────────────────
# Debug CLI helper
# ───────────────────────────────────────────────────────────────

if __name__ == "__main__":  # pragma: no cover
    spec = MDSpec()
    print("=== MD Production ===")
    print(build_mdp(spec, "md"))
    print("\n=== SLURM Script ===")
    print(build_slurm(spec))
